% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exporting-adverbs.R
\name{exporting-adverbs}
\alias{exporting-adverbs}
\title{Best practices for exporting adverb-wrapped functions}
\description{
Functions like \code{\link[=insistently]{insistently()}}, \code{\link[=safely]{safely()}}, \code{\link[=slowly]{slowly()}}, and \code{\link[=quietly]{quietly()}} help
resolve challenging issues in programming. For example, \code{\link[=safely]{safely()}} modifies a
function to return both an error and a result. These functions work by
returning an enhanced version of the original function. They are often called
'adverb' functions, typically named something like \code{insist_scrape_data} or
\code{safe_scrape_data}.

Distributing an adverb function like \code{safe_scrape_data} in an R package
requires using a special function called \code{.onLoad()}. This is because these
functions are generated by \code{purrr} code, and assigning functions in your
namespace at build time might cause issues. For example, when \code{purrr} is
updated, and your package is not. This would mean the functions you create in
the package will contain the old source code, and may even refer to functions
that no longer exist in the \code{purrr} namespace.

An example if provided below for \code{insist}, but it would be very similar for
these other "adverb" type functions.\preformatted{#' My function
insist_my_function <- function(...) "dummy"

my_function <- function(...) \{
  # Implementation
\}

.onLoad <- function(lib, pkg) \{
  insist_my_function <<- purrr::insistently(my_function)
\}
}
}
